import java.io.*;
import java.util.*;
/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 *
 * @author Indrajit Sinha
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		int testcase=1;
		solver.solve(testcase, in, out);
		out.close();
	}

	static class Task {
		PrintWriter out;
		InputReader in;
		int mm = 1000000007;
		int n;
		ArrayList<Integer>[] tree;
		boolean[] vis;
		public void solve(int testNumber, InputReader in, PrintWriter out) {
			int t, i, j, tt, k;
			this.out = out;
			this.in = in;

		}
		int ni(){
    return in.nextInt();
    }
    long nl(){
     return in.nextLong();
     }
     double nd(){
     return in.nextDouble();
     }
    void pn(int zx){
        out.println(zx);
    }
    void pn(long zx){
        out.println(zx);
     }
     void pn(String zx){
        out.println(zx);
     }
     void p(int zx){
        out.print(zx+" ");
     }
     void p(long zx){
        out.print(zx+" ");
     }
     void p(String zx){
        out.print(zx+" ");
     }
    void initT(int n) {
    		vis = new boolean[n];
    		tree = new ArrayList[n];
    		for (int i = 0; i < n; i++) {
    			tree[i] = new ArrayList<>();
    		}
    	}
    	void tadd(int x,int y){
            	    tree[x].add(y);
            	    tree[y].add(x);
        	    }
    	class hog {
    		char ch;
    	}

    	final Comparator<Entity> com = new Comparator<Entity>() {
    		public int compare(Entity x, Entity y) {
    			int xx = Integer.compare(x.a, y.a);
    			if (xx == 0) {
    				return Integer.compare(x.b, y.b);
    			} else {
    				return xx;
    			}
    		}
    	};

    	void sort(int a[]){
        			PriorityQueue<Integer> pq=new PriorityQueue<>();
        			for(int i=0;i<a.length;i++){
        				pq.add(a[i]);
        			}
        			for(int i=0;i<a.length;i++){
        				a[i]=pq.poll();
        			}
        		}

        void sort(long a[]){
        			PriorityQueue<Long> pq=new PriorityQueue<>();
        			for(int i=0;i<a.length;i++){
        				pq.add(a[i]);
        			}
        			for(int i=0;i<a.length;i++){
        				a[i]=pq.poll();
        			}
        		}
    	class Pair {

    		int a, b, c;

    		Pair(int x, int y, int z) {
    			a = x;
    			b = y;
    			c = z;
    		}
    	}

    	class Entity {

    		int a;
    		int b;

    		Entity(int p, int q) {
    			a = p;
    			b = q;
    		}
    	}

    	long gcd(long a, long b) {
    		return (b == 0) ? a : gcd(b, a % b);
    	}

    	int gcdi(int a, int b) {
    		return (b == 0) ? a : gcdi(b, a % b);
    	}

    	long power(long x, int y, int m) {
    		if (y == 0) {
    			return 1;
    		}
    		long p = power(x, y / 2, m) % m;
    		p = (p * p) % m;
    		return (y % 2 == 0) ? p : (x * p) % m;
    	}

	}
public static class InputReader {

	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar;
	private int numChars;

	public InputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1) {
			throw new UnknownError();
		}
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new UnknownError();
			}
			if (numChars <= 0) {
				return -1;
			}
		}
		return buf[curChar++];
	}

	public int peek() {
		if (numChars == -1) {
			return -1;
		}
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				return -1;
			}
			if (numChars <= 0) {
				return -1;
			}
		}
		return buf[curChar];
	}

	public void skip(int x) {
		while (x-- > 0) {
			read();
		}
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public String nextString() {
		return next();
	}

	public String next() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));

		return res.toString();
	}

	public String nextLine() {
		StringBuffer buf = new StringBuffer();
		int c = read();
		while (c != '\n' && c != -1) {
			if (c != '\r') {
				buf.appendCodePoint(c);
			}
			c = read();
		}
		return buf.toString();
	}


	public double nextDouble() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		double res = 0;
		while (!isSpaceChar(c) && c != '.') {
			if (c == 'e' || c == 'E') {
				return res * Math.pow(10, nextInt());
			}
			if (c < '0' || c > '9') {
				throw new InputMismatchException();
			}
			res *= 10;
			res += c - '0';
			c = read();
		}
		if (c == '.') {
			c = read();
			double m = 1;
			while (!isSpaceChar(c)) {
				if (c == 'e' || c == 'E') {
					return res * Math.pow(10, nextInt());
				}
				if (c < '0' || c > '9') {
					throw new InputMismatchException();
				}
				m /= 10;
				res += (c - '0') * m;
				c = read();
			}
		}
		return res * sgn;
	}

	public boolean hasNext() {
		int value;
		while (isSpaceChar(value = peek()) && value != -1) {
			read();
		}
		return value != -1;
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
}
}

